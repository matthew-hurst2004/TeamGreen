
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author npcnp
 */
public class Calc6 extends javax.swing.JFrame {

    /**
     * Creates new form Calc6
     */
    public Calc6() 
    {
        initComponents();
        lblOriginalLoanAmount.setVisible(false);
        lblCurrentLoanTerm.setVisible(false);
        lblTimeRemaining.setVisible(false);
        txtOriginalLoanAmount.setVisible(false);
        txtOriginalLoanTerm.setVisible(false);
        txtTimeRemainingYears.setVisible(false);
        txtTimeRemainingMonths.setVisible(false);
        lblYears.setVisible(false);
        lblYears1.setVisible(false);
        lblMonths.setVisible(false);
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        txtRemainingBalance = new javax.swing.JTextField();
        txtCurrentMonthlyPayment = new javax.swing.JTextField();
        txtCurrentInterestRate = new javax.swing.JTextField();
        txtNewLoanMonths = new javax.swing.JTextField();
        txtNewInterestRate = new javax.swing.JTextField();
        txtPoints = new javax.swing.JTextField();
        txtCostFees = new javax.swing.JTextField();
        txtCashOutAmount = new javax.swing.JTextField();
        lblCurrentLoan = new javax.swing.JLabel();
        lblNewLoan = new javax.swing.JLabel();
        lblRemainingBalance = new javax.swing.JLabel();
        lblMonthlyPayment = new javax.swing.JLabel();
        lblCurrentInterestRate = new javax.swing.JLabel();
        cboxOptions = new javax.swing.JComboBox<>();
        lblNewLoanTerm = new javax.swing.JLabel();
        lblNewInterestRate = new javax.swing.JLabel();
        lblPoints = new javax.swing.JLabel();
        lblCostsFees = new javax.swing.JLabel();
        lblCashOut = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnCalculate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        lblYear = new javax.swing.JLabel();
        lblPercent2 = new javax.swing.JLabel();
        lblPercent1 = new javax.swing.JLabel();
        txtOriginalLoanAmount = new javax.swing.JTextField();
        txtOriginalLoanTerm = new javax.swing.JTextField();
        lblOriginalLoanAmount = new javax.swing.JLabel();
        txtTimeRemainingYears = new javax.swing.JTextField();
        txtTimeRemainingMonths = new javax.swing.JTextField();
        lblCurrentLoanTerm = new javax.swing.JLabel();
        lblTimeRemaining = new javax.swing.JLabel();
        lblYears = new javax.swing.JLabel();
        lblMonths = new javax.swing.JLabel();
        lblYears1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOutput = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 102, 102));

        closeButton.setText("Close");
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonMouseClicked(evt);
            }
        });

        txtRemainingBalance.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtRemainingBalance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRemainingBalanceKeyTyped(evt);
            }
        });

        txtCurrentMonthlyPayment.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtCurrentMonthlyPayment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCurrentMonthlyPaymentKeyTyped(evt);
            }
        });

        txtCurrentInterestRate.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtCurrentInterestRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCurrentInterestRateKeyTyped(evt);
            }
        });

        txtNewLoanMonths.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtNewLoanMonths.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNewLoanMonthsKeyTyped(evt);
            }
        });

        txtNewInterestRate.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtNewInterestRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNewInterestRateKeyTyped(evt);
            }
        });

        txtPoints.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtPoints.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPointsKeyTyped(evt);
            }
        });

        txtCostFees.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtCostFees.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCostFeesKeyTyped(evt);
            }
        });

        txtCashOutAmount.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtCashOutAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCashOutAmountKeyTyped(evt);
            }
        });

        lblCurrentLoan.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblCurrentLoan.setText("Current Loan");
        lblCurrentLoan.setToolTipText("");

        lblNewLoan.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblNewLoan.setText("New Loan");

        lblRemainingBalance.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblRemainingBalance.setText("Remaining Balance:");

        lblMonthlyPayment.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblMonthlyPayment.setText("Monthly payment:");

        lblCurrentInterestRate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCurrentInterestRate.setText("Interest Rate:");

        cboxOptions.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cboxOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "I know my remaining balance", "I know the original loan amount" }));
        cboxOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxOptionsActionPerformed(evt);
            }
        });

        lblNewLoanTerm.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblNewLoanTerm.setText("New Loan Term:");

        lblNewInterestRate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblNewInterestRate.setText("Interest Rate:");

        lblPoints.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblPoints.setText("Points:");

        lblCostsFees.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCostsFees.setText("Costs and Fees:");

        lblCashOut.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCashOut.setText("Cash Out Amount:");

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        btnCalculate.setText("Calculate");
        btnCalculate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCalculateMouseClicked(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnClearMouseClicked(evt);
            }
        });

        lblYear.setText("Year(s)");

        lblPercent2.setText("%");

        lblPercent1.setText("%");

        txtOriginalLoanAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOriginalLoanAmountKeyTyped(evt);
            }
        });

        txtOriginalLoanTerm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOriginalLoanTermKeyTyped(evt);
            }
        });

        lblOriginalLoanAmount.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblOriginalLoanAmount.setText("Original loan amount: ");

        txtTimeRemainingYears.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTimeRemainingYearsKeyTyped(evt);
            }
        });

        txtTimeRemainingMonths.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTimeRemainingMonthsKeyTyped(evt);
            }
        });

        lblCurrentLoanTerm.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCurrentLoanTerm.setText("Loan Term:");

        lblTimeRemaining.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTimeRemaining.setText("Time Remaning:");

        lblYears.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblYears.setText("Year(s)");

        lblMonths.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblMonths.setText("Months");

        lblYears1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblYears1.setText("Year(s)");

        tblOutput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Current Loan", "New Loan", "Difference"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblOutput);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(lblCurrentLoan, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(lblOriginalLoanAmount)
                                                            .addComponent(lblCurrentInterestRate, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(lblTimeRemaining, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGap(22, 22, 22))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(lblCurrentLoanTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(txtCurrentMonthlyPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                            .addComponent(txtTimeRemainingYears)
                                                            .addComponent(txtOriginalLoanTerm)
                                                            .addComponent(txtOriginalLoanAmount)
                                                            .addComponent(txtTimeRemainingMonths, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(txtRemainingBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addComponent(txtCurrentInterestRate, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(cboxOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(lblYears1, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblMonths)
                                                    .addComponent(lblPercent1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblYears, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(lblMonthlyPayment, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblRemainingBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(112, 112, 112)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(btnCalculate, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(closeButton))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(lblNewLoan, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(lblNewInterestRate, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblCostsFees, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblCashOut, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(lblNewLoanTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNewLoanMonths, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNewInterestRate, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCostFees, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCashOutAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lblYear, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPercent2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(closeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCalculate, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCurrentLoan, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(cboxOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRemainingBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRemainingBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMonthlyPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCurrentMonthlyPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCurrentInterestRate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPercent1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCurrentInterestRate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOriginalLoanAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtOriginalLoanAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCurrentLoanTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtOriginalLoanTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblYears)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblNewLoan, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNewLoanTerm)
                            .addComponent(txtNewLoanMonths, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblYear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblNewInterestRate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtNewInterestRate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblPercent2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCostsFees, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCostFees, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCashOut, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCashOutAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(lblTimeRemaining, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMonths))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtTimeRemainingYears, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblYears1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTimeRemainingMonths, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseClicked
        this.dispose();
    }//GEN-LAST:event_closeButtonMouseClicked

    private void txtRemainingBalanceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRemainingBalanceKeyTyped
        Helper.consumeNotNumbersAllowDecimalLongLength(txtRemainingBalance, evt);        // TODO add your handling code here:
    }//GEN-LAST:event_txtRemainingBalanceKeyTyped

    private void txtCurrentMonthlyPaymentKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCurrentMonthlyPaymentKeyTyped
        Helper.consumeNotNumbersAllowDecimalLongLength(txtCurrentMonthlyPayment, evt);        // TODO add your handling code here:
    }//GEN-LAST:event_txtCurrentMonthlyPaymentKeyTyped

    private void txtCurrentInterestRateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCurrentInterestRateKeyTyped
        Helper.consumeNotNumbersAllowDecimal(txtCurrentInterestRate, evt);        // TODO add your handling code here:
    }//GEN-LAST:event_txtCurrentInterestRateKeyTyped

    private void txtNewLoanMonthsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNewLoanMonthsKeyTyped
        Helper.consumeNotNumbersAllowDecimal(txtNewLoanMonths, evt);        // TODO add your handling code here:
    }//GEN-LAST:event_txtNewLoanMonthsKeyTyped

    private void txtNewInterestRateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNewInterestRateKeyTyped
        Helper.consumeNotNumbersAllowDecimal(txtNewInterestRate, evt);        // TODO add your handling code here:
    }//GEN-LAST:event_txtNewInterestRateKeyTyped

    private void txtPointsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPointsKeyTyped
        Helper.consumeNotNumbersAllowDecimal(txtPoints, evt);        // TODO add your handling code here:
    }//GEN-LAST:event_txtPointsKeyTyped

    private void txtCostFeesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostFeesKeyTyped
        Helper.consumeNotNumbersAllowDecimalLongLength(txtCostFees, evt);        // TODO add your handling code here:
    }//GEN-LAST:event_txtCostFeesKeyTyped

    private void txtCashOutAmountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCashOutAmountKeyTyped
        Helper.consumeNotNumbersAllowDecimalAndNeg(txtCashOutAmount, evt);        // TODO add your handling code here:
    }//GEN-LAST:event_txtCashOutAmountKeyTyped

    private void btnCalculateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCalculateMouseClicked
        
        double remainingBalance = 0; 
        double currentMonthlyPayment = 0; 
        double originalLoanAmount = 0;
        double originalLoanTerm = 0; 
        double originalLoanRemainingMonths = 0; 
        double originalLoanRemainingYears = 0;
        double currentInterestRate; 
        double newLoanMonths; 
        double newInterestRate; 
        double points;
        double pointsCost = 0;
        double costFees; 
        double cashOutAmount;
        double currentAccumulatedInterest = 0;
        double newAccumulatedInterest = 0;
        double totalCurrentMonthlyPayments = 0;
        double totalNewMonthlyPayments = 0;
        double currentLoanMonths = 0;
        double newMonthlyPayment = 0;
        double originalLoanMonthlyPayment = 0;
        double newPrincipalOriginal = 0;
        double newPrincipalFinal = 0;  //placeholder var dependent on option choice for balance
        double timeDifference = 0;
        double originalLoanInterest = 0;
        double AprPrincipal = 0;
        double tolerance = 0.000001; // Tolerance for accuracy
        
        
        if (cboxOptions.getSelectedIndex() == 0)
        {
           // remaining balance
            if (txtRemainingBalance.getText().equals("")) 
            {
                JOptionPane.showMessageDialog(this, "Please provide a positive remaining balance of the current loan.",
               "Error", JOptionPane.ERROR_MESSAGE);
                txtRemainingBalance.setText("");
                txtRemainingBalance.requestFocusInWindow();
                return;
            } else {
                remainingBalance  = Double.parseDouble(txtRemainingBalance.getText());
            }                 
            // current monthly payment
            if (txtCurrentMonthlyPayment.getText().equals("")) 
            {
                JOptionPane.showMessageDialog(this, "Please provide a positive monthly payment amount of the current loan..",
               "Error", JOptionPane.ERROR_MESSAGE);
                txtCurrentMonthlyPayment.setText("");
                txtCurrentMonthlyPayment.requestFocusInWindow();
                return;
            } else {
                currentMonthlyPayment = Double.parseDouble(txtCurrentMonthlyPayment.getText());
            } 
        } // end if 
        else
        {
            // original loan amount
            if (txtOriginalLoanAmount.getText().equals("")) 
            {
                JOptionPane.showMessageDialog(this, "Please provide a positive original loan amount of current loan value",
               "Error", JOptionPane.ERROR_MESSAGE);
                txtOriginalLoanAmount.setText("");
                txtOriginalLoanAmount.requestFocusInWindow();
                return;
                
            } else {
                originalLoanAmount = Double.parseDouble(txtOriginalLoanAmount.getText());
            }                  
            // original loan term - in months
            if (txtOriginalLoanTerm.getText().equals("") || Double.parseDouble(txtOriginalLoanTerm.getText()) > 51) 
            {
                JOptionPane.showMessageDialog(this, "Please provide a positive loan term that is 50 years or less.",
               "Error", JOptionPane.ERROR_MESSAGE);
                txtOriginalLoanTerm.setText("");
                txtOriginalLoanTerm.requestFocusInWindow();
                return;
            } else {
                originalLoanTerm = Math.floor(Double.parseDouble(txtOriginalLoanTerm.getText()) * 12) ;
            }                  
            // original loan remaining years - in months
            if (txtTimeRemainingYears.getText().equals("")) 
            {
                JOptionPane.showMessageDialog(this, "Please provide a positive remaining year and month value.",
               "Error", JOptionPane.ERROR_MESSAGE);
                txtTimeRemainingYears.setText("");
                txtTimeRemainingYears.requestFocusInWindow();
                return;
            } else {
                originalLoanRemainingYears = Math.floor(Double.parseDouble(txtTimeRemainingYears.getText()) * 12);
            }                       
            // original loan remaining months
            if (txtTimeRemainingMonths.getText().equals("")) 
            {
                JOptionPane.showMessageDialog(this, "Please provide a positive remaining year and month value.",
               "Error", JOptionPane.ERROR_MESSAGE);
                txtTimeRemainingMonths.setText("");
                txtTimeRemainingMonths.requestFocusInWindow();
                return;
            } else {
                originalLoanRemainingMonths = Math.floor(Double.parseDouble(txtTimeRemainingMonths.getText()));
            }
        } // end else
        
        if ((originalLoanRemainingYears + originalLoanRemainingMonths) > originalLoanTerm)
        {
            JOptionPane.showMessageDialog(this, "Please provide a positive remaining year and month value.",
               "Error", JOptionPane.ERROR_MESSAGE);
                txtTimeRemainingYears.setText("");
                txtTimeRemainingMonths.setText("");
                txtTimeRemainingYears.requestFocusInWindow();
                return;
        }
        
        
                     
        // current interest rate
        if (txtCurrentInterestRate.getText().equals("") || Double.parseDouble(txtCurrentInterestRate.getText()) > 200) 
        {
            JOptionPane.showMessageDialog(this, "Please provide a positive interest rate that is 200% or less.",
               "Error", JOptionPane.ERROR_MESSAGE);
                txtCurrentInterestRate.setText("");
                txtCurrentInterestRate.requestFocusInWindow();
                return;
        } else {
            currentInterestRate = Double.parseDouble(txtCurrentInterestRate.getText()) / 1200.0;
        }        
        // new loan term - in months
        if (txtNewLoanMonths.getText().equals("") || Double.parseDouble(txtNewLoanMonths.getText()) < 1 
                || Double.parseDouble(txtNewLoanMonths.getText()) > 1000) 
        {
            JOptionPane.showMessageDialog(this, "Please provide a reasonable new loan term value.",
               "Error", JOptionPane.ERROR_MESSAGE);
            txtNewLoanMonths.setText("");
            txtNewLoanMonths.requestFocusInWindow();
            return;
        } else {
            newLoanMonths = Math.floor(Double.parseDouble(txtNewLoanMonths.getText()) * 12);
        }        
        // new loan interest rate
        if (txtNewInterestRate.getText().equals("") || Double.parseDouble(txtNewInterestRate.getText()) > 200) 
        {
            JOptionPane.showMessageDialog(this, "Please provide a positive interest rate that is 200% or less.",
               "Error", JOptionPane.ERROR_MESSAGE);
                txtNewInterestRate.setText("");
                txtNewInterestRate.requestFocusInWindow();
                return;
        } else {
            newInterestRate = Double.parseDouble(txtNewInterestRate.getText()) / 1200.0;
        }    
        // points
        if (txtPoints.getText().equals("") || Double.parseDouble(txtPoints.getText()) > 100) 
        {
            JOptionPane.showMessageDialog(this, "Please provide a point from 0 to 100.",
               "Error", JOptionPane.ERROR_MESSAGE);
                txtPoints.setText("");
                txtPoints.requestFocusInWindow();
                return;
        } else {
            points = Double.parseDouble(txtPoints.getText()) / 100.0;
        }
        // cost and fees
        if (txtCostFees.getText().equals("")) 
        {
            JOptionPane.showMessageDialog(this, "Please provide a positive cost value.",
               "Error", JOptionPane.ERROR_MESSAGE);
                txtCostFees.setText("");
                txtCostFees.requestFocusInWindow();
                return;
        } else {
            costFees = Double.parseDouble(txtCostFees.getText());
        }
        // cash out amount
        if (txtCashOutAmount.getText().equals("")) 
        {
            JOptionPane.showMessageDialog(this, "Please provide a numeric cash out amount.",
               "Error", JOptionPane.ERROR_MESSAGE);
                txtCashOutAmount.setText("");
                txtCashOutAmount.requestFocusInWindow();
                return;
        } else {
            cashOutAmount = Double.parseDouble(txtCashOutAmount.getText());
        }
        
        
        //option specific operations
        if (cboxOptions.getSelectedIndex() == 0) // remaining balance option
        {
            
            if (currentMonthlyPayment <= remainingBalance * currentInterestRate) 
            {
                JOptionPane.showMessageDialog(this, "Monthly payment is too low to pay off the balance. Please enter a higher monthly payment",
               "Error", JOptionPane.ERROR_MESSAGE);
                txtCurrentMonthlyPayment.setText("");
                txtCurrentMonthlyPayment.requestFocusInWindow();
                return;
            }
            //accumulated interest for current loan
            currentAccumulatedInterest = Helper.remainingAccumulatedInterest(remainingBalance, currentMonthlyPayment, 
                    currentInterestRate);
            // total amount of payments made on current loan
            totalCurrentMonthlyPayments = remainingBalance + currentAccumulatedInterest;
            //months
            currentLoanMonths = Helper.months(remainingBalance, currentMonthlyPayment, currentInterestRate);
            newPrincipalFinal = remainingBalance + cashOutAmount; // updated remaining balance for new loan
            pointsCost = newPrincipalFinal * points;
            AprPrincipal = newPrincipalFinal - (pointsCost + costFees);
            System.out.println(AprPrincipal);
        }
        else // original amount option
        {
            
           // needed to find the remaining interest
            timeDifference = originalLoanTerm - (originalLoanRemainingYears + originalLoanRemainingMonths);
           //original loan monthly payment
            originalLoanMonthlyPayment = Helper.monthlyPayment(originalLoanAmount, originalLoanTerm, currentInterestRate);
           //interest for original loan option
            originalLoanInterest = Helper.originalAccumulatedInterest(originalLoanAmount, originalLoanMonthlyPayment, 
                currentInterestRate, timeDifference);
            //original loan principal updated
            newPrincipalOriginal = (originalLoanMonthlyPayment * (originalLoanRemainingYears + originalLoanRemainingMonths))
                   - originalLoanInterest;
            // total amount of payments made on current loan
            totalCurrentMonthlyPayments = newPrincipalOriginal + originalLoanInterest;
            newPrincipalFinal = newPrincipalOriginal + cashOutAmount;
            AprPrincipal = newPrincipalFinal;
        }
        
        
        // new loan operations
        newMonthlyPayment = Helper.monthlyPayment(newPrincipalFinal, newLoanMonths, newInterestRate); //new loan monthly payment        
        //accumualted interest for new loan
        newAccumulatedInterest = Helper.remainingAccumulatedInterest(newPrincipalFinal, newMonthlyPayment, newInterestRate);
        // cost of points on loan
        //double pointsCost = newPrincipalFinal * points;
        // total amount of payments made on new loan
        totalNewMonthlyPayments = newPrincipalFinal + newAccumulatedInterest;
        // finding new apr
        double monthlyRate = Helper.calculateInterestRate(AprPrincipal, newMonthlyPayment, newLoanMonths, tolerance);
        double apr = monthlyRate * 12 * 100; // Convert monthly rate to annual percentage rate

        
        
        DefaultTableModel model = (DefaultTableModel) tblOutput.getModel();
        model.setRowCount(0);
        
        
        // option dependent output
        if (cboxOptions.getSelectedIndex() == 0)
        {
            model.addRow(new Object[]{"Principal/loan amount", "$" + Helper.formatDouble(remainingBalance), "$" + Helper.formatDouble(newPrincipalFinal), 
                "$" + Helper.formatDouble(newPrincipalFinal - remainingBalance)});
            model.addRow(new Object[]{"Monthly Payment", "$" + Helper.formatDouble(currentMonthlyPayment), "$" + Helper.formatDouble(newMonthlyPayment), 
                "$" + Helper.formatDouble(newMonthlyPayment - currentMonthlyPayment)});
            model.addRow(new Object[]{"Length", currentLoanMonths, newLoanMonths, newLoanMonths - currentLoanMonths});
            model.addRow(new Object[]{"Interest Rate", Helper.formatDouble(currentInterestRate * 1200.0) + "%", Helper.formatDouble(apr) + "%", 
                Helper.formatDouble(apr - (currentInterestRate * 1200)) + "%"});
            model.addRow(new Object[]{"Total Monthly Payment", "$" + Helper.formatDouble(totalCurrentMonthlyPayments), 
                "$" + Helper.formatDouble(totalNewMonthlyPayments), "$" + Helper.formatDouble(totalNewMonthlyPayments - totalCurrentMonthlyPayments)});
            model.addRow(new Object[]{"Total Interest", "$" + Helper.formatDouble(currentAccumulatedInterest),
                "$" + Helper.formatDouble(newAccumulatedInterest), "$" + Helper.formatDouble(newAccumulatedInterest - currentAccumulatedInterest)});
            model.addRow(new Object[]{"Cost + points (upfront)", "$" + 0, "$" + Helper.formatDouble(pointsCost + costFees)});
            model.addRow(new Object[]{"Cash out", "$" + 0, "$" + Helper.formatDouble(cashOutAmount)});
 }
        else
        {
            model.addRow(new Object[]{"Principal/loan amount", "$" + Helper.formatDouble(newPrincipalOriginal),
                "$" + Helper.formatDouble(newPrincipalFinal), "$" + Helper.formatDouble(newPrincipalFinal - newPrincipalOriginal)});
            model.addRow(new Object[]{"Monthly Payment", "$" + Helper.formatDouble(originalLoanMonthlyPayment), 
                "$" + Helper.formatDouble(newMonthlyPayment), "$" + Helper.formatDouble(newMonthlyPayment - originalLoanMonthlyPayment)});
            model.addRow(new Object[]{"Length", originalLoanRemainingYears + originalLoanRemainingMonths, newLoanMonths, 
                newLoanMonths - (originalLoanRemainingYears + originalLoanRemainingMonths)});
            model.addRow(new Object[]{"Interest Rate", Helper.formatDouble(currentInterestRate * 1200.0) + "%",
                Helper.formatDouble(apr) + "%", Helper.formatDouble(apr - (currentInterestRate * 1200)) + "%"});
            model.addRow(new Object[]{"Total Monthly Payment", "$" + Helper.formatDouble(totalCurrentMonthlyPayments), 
                "$" + Helper.formatDouble(totalNewMonthlyPayments), "$" + Helper.formatDouble(totalNewMonthlyPayments - totalCurrentMonthlyPayments)});
            model.addRow(new Object[]{"Total Interest", Helper.formatDouble(originalLoanInterest) + "$", 
                "$" + Helper.formatDouble(newAccumulatedInterest), "$" + Helper.formatDouble(newAccumulatedInterest - originalLoanInterest) + "%"});
            model.addRow(new Object[]{"Cost + points (upfront)", "$" + 0, "$" + Helper.formatDouble(pointsCost + costFees)});
            model.addRow(new Object[]{"Cash out", "$" + 0, "$" + Helper.formatDouble(cashOutAmount)});

        }
              

    // end button
    }//GEN-LAST:event_btnCalculateMouseClicked

    private void btnClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearMouseClicked
        txtRemainingBalance.setText("");
        txtCurrentMonthlyPayment.setText("");
        txtCurrentInterestRate.setText("");
        txtNewLoanMonths.setText("");
        txtNewInterestRate.setText("");
        txtPoints.setText("");
        txtCostFees.setText("");
        txtCashOutAmount.setText("");
        // original loan
        txtOriginalLoanAmount.setText("");
        txtOriginalLoanTerm.setText("");
        txtTimeRemainingYears.setText("");
        txtTimeRemainingMonths.setText("");
        if (cboxOptions.getSelectedIndex() == 0)
        {
            txtRemainingBalance.requestFocusInWindow();
        }
        else
        {
            txtOriginalLoanAmount.requestFocusInWindow();
        }
        
        
    }//GEN-LAST:event_btnClearMouseClicked

    private void cboxOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxOptionsActionPerformed

        if (cboxOptions.getSelectedIndex() == 0)
        {
            txtRemainingBalance.setVisible(true);
            txtCurrentMonthlyPayment.setVisible(true);
            lblRemainingBalance.setVisible(true);
            lblMonthlyPayment.setVisible(true);
            txtCurrentInterestRate.setText("");
            // original loan
            lblOriginalLoanAmount.setVisible(false);
            lblCurrentLoanTerm.setVisible(false);
            lblTimeRemaining.setVisible(false);
            txtOriginalLoanAmount.setVisible(false);
            txtOriginalLoanTerm.setVisible(false);
            txtTimeRemainingYears.setVisible(false);
            txtTimeRemainingMonths.setVisible(false);
            lblYears.setVisible(false);
            lblYears1.setVisible(false);
            lblMonths.setVisible(false);

        }
        else
        {
            txtRemainingBalance.setVisible(false);
            txtCurrentMonthlyPayment.setVisible(false);
            lblRemainingBalance.setVisible(false);
            lblMonthlyPayment.setVisible(false);
            txtCurrentInterestRate.setText("");
            // original loan
            lblOriginalLoanAmount.setVisible(true);
            lblCurrentLoanTerm.setVisible(true);
            lblTimeRemaining.setVisible(true);
            txtOriginalLoanAmount.setVisible(true);
            txtOriginalLoanTerm.setVisible(true);
            txtTimeRemainingYears.setVisible(true);
            txtTimeRemainingMonths.setVisible(true);
            lblYears.setVisible(true);
            lblYears1.setVisible(true);
            lblMonths.setVisible(true);
        }
    }//GEN-LAST:event_cboxOptionsActionPerformed

    private void txtOriginalLoanAmountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOriginalLoanAmountKeyTyped
        Helper.consumeNotNumbersAllowDecimal(txtOriginalLoanAmount, evt);
    }//GEN-LAST:event_txtOriginalLoanAmountKeyTyped

    private void txtOriginalLoanTermKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOriginalLoanTermKeyTyped
        Helper.consumeNotNumbersAllowDecimal(txtOriginalLoanTerm, evt);
    }//GEN-LAST:event_txtOriginalLoanTermKeyTyped

    private void txtTimeRemainingYearsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimeRemainingYearsKeyTyped
        Helper.consumeNotNumbersAllowDecimal(txtTimeRemainingYears, evt);
    }//GEN-LAST:event_txtTimeRemainingYearsKeyTyped

    private void txtTimeRemainingMonthsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimeRemainingMonthsKeyTyped
        Helper.consumeNotNumbersAllowDecimal(txtTimeRemainingMonths, evt);
    }//GEN-LAST:event_txtTimeRemainingMonthsKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calc6.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calc6.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calc6.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calc6.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calc6().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnClear;
    private javax.swing.JComboBox<String> cboxOptions;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCashOut;
    private javax.swing.JLabel lblCostsFees;
    private javax.swing.JLabel lblCurrentInterestRate;
    private javax.swing.JLabel lblCurrentLoan;
    private javax.swing.JLabel lblCurrentLoanTerm;
    private javax.swing.JLabel lblMonthlyPayment;
    private javax.swing.JLabel lblMonths;
    private javax.swing.JLabel lblNewInterestRate;
    private javax.swing.JLabel lblNewLoan;
    private javax.swing.JLabel lblNewLoanTerm;
    private javax.swing.JLabel lblOriginalLoanAmount;
    private javax.swing.JLabel lblPercent1;
    private javax.swing.JLabel lblPercent2;
    private javax.swing.JLabel lblPoints;
    private javax.swing.JLabel lblRemainingBalance;
    private javax.swing.JLabel lblTimeRemaining;
    private javax.swing.JLabel lblYear;
    private javax.swing.JLabel lblYears;
    private javax.swing.JLabel lblYears1;
    private javax.swing.JTable tblOutput;
    private javax.swing.JTextField txtCashOutAmount;
    private javax.swing.JTextField txtCostFees;
    private javax.swing.JTextField txtCurrentInterestRate;
    private javax.swing.JTextField txtCurrentMonthlyPayment;
    private javax.swing.JTextField txtNewInterestRate;
    private javax.swing.JTextField txtNewLoanMonths;
    private javax.swing.JTextField txtOriginalLoanAmount;
    private javax.swing.JTextField txtOriginalLoanTerm;
    private javax.swing.JTextField txtPoints;
    private javax.swing.JTextField txtRemainingBalance;
    private javax.swing.JTextField txtTimeRemainingMonths;
    private javax.swing.JTextField txtTimeRemainingYears;
    // End of variables declaration//GEN-END:variables
}
